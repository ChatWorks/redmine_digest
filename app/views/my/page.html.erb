<%
   user = User.find(224)
   digest_rule = user.digest_rules.create(
       :name => 'Testing',
       :recurrent => DigestRule::DAILY,
       :event_ids => [DigestEvent::STATUS_CHANGED,
                      DigestEvent::PERCENT_CHANGED,
                      DigestEvent::ASSIGNEE_CHANGED]
   )

   @digest = RedmineDigest::Digest.new(digest_rule, Time.now - 3.days)
   @sorted_digest_issues = ActiveSupport::OrderedHash.new
   IssueStatus.sorted.each do |status|
     iss = @digest.issues.find_all { |i| i.status_id == status.id }.sort_by(&:last_updated_on)
     @sorted_digest_issues[status] = iss
   end
%>

<h1>Ежедневный дайджест с изменениями с <%= @digest.date_from %> по <%= @digest.date_to %></h1>

<h2>Overview</h2>

<% @sorted_digest_issues.each do |status, digest_issues| %>
  <% next if digest_issues.empty? %>

  <h3><%=	status %></h3>

  <ul>
    <% digest_issues.each do |issue| %>
      <li><%= link_to "##{issue.id} [#{issue.project_name}] #{issue.subject}",
                      :controller => 'issues',
                      :action => 'show',
                      :id => issue.id %>
        &nbsp;(<%= @digest.digest_rule.event_ids.map do |event_type|

        if (last_event = issue.events[event_type].last)
          link_to(
              last_event.formatted_value,
              {
                  :controller => 'issues',
                  :action => 'show',
                  :id => issue.id,
                  :anchor => "note-#{last_event.indice}"
              },
              :title => issue.events_summary(event_type))
          else
            'WTF?'
          end
      end.join(', ').html_safe %>)</li>
    <% end %>
  </ul>
<% end %>

<h2>Details</h2>
